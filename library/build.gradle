apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'checkstyle'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

android {
    compileSdk 27
    namespace 'es.voghdev.pdfviewpager.library'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 27
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lint {
        abortOnError false
    }
    buildFeatures {
        buildConfig true
    }
}

task checkstyle(type: Checkstyle) {
    configFile = rootProject.file('config/checkstyle.xml')

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    classpath = files()
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.davemorrissey.labs:subsampling-scale-image-view:3.10.0'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
}

// for Bintray
def libGit = libGit
def libUrl = libUrl
def libDescription = libDescription
def libGroupId = libGroupId
def libArtifactId = libArtifactId

// for Maven
group = libGroupId
version = projectVersionName
install {
    repositories.mavenInstaller {
        pom.project {
            name libArtifactId
            description libDescription
            url libUrl
            inceptionYear '2019'

            packaging 'aar'
            groupId libGroupId
            artifactId libArtifactId
            version projectVersionName

            licenses {
                license {
                    name 'Apache-2.0'
                    url libLicenseUrl
                }
            }
        }
    }
}

// Bintray
Properties properties = new Properties()
File propertiesFile = file(project.rootProject.file('local.properties'))
if (propertiesFile.exists())
    properties.load(propertiesFile.newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    pkg {
        repo = 'artifacts'
        name = libArtifactId
        userOrg = 'jobandtalent'
        licenses = ['Apache-2.0']
        vcsUrl = libGit
        version {
            name = projectVersionName
        }
    }
    configurations = ['archives']
}

if (project.hasProperty("android")) { // Android libraries
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}
